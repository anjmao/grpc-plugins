//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: debug.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Debug_DebugGetVersionCall: ClientCallUnary {}

fileprivate final class Debug_DebugGetVersionCallBase: ClientCallUnaryBase<Debug_GetVersionRequest, Debug_GetVersionReply>, Debug_DebugGetVersionCall {
  override class var method: String { return "/debug.Debug/GetVersion" }
}

internal protocol Debug_DebugPingCall: ClientCallUnary {}

fileprivate final class Debug_DebugPingCallBase: ClientCallUnaryBase<Debug_PingRequest, Debug_PingReply>, Debug_DebugPingCall {
  override class var method: String { return "/debug.Debug/Ping" }
}

internal protocol Debug_DebugGetStreamCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Debug_GetStreamReply?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Debug_GetStreamReply?>) -> Void) throws
}

internal extension Debug_DebugGetStreamCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Debug_GetStreamReply? { return try self._receive(timeout: timeout) }
}

fileprivate final class Debug_DebugGetStreamCallBase: ClientCallServerStreamingBase<Debug_GetStreamRequest, Debug_GetStreamReply>, Debug_DebugGetStreamCall {
  override class var method: String { return "/debug.Debug/GetStream" }
}


/// Instantiate Debug_DebugServiceClient, then call methods of this protocol to make API calls.
internal protocol Debug_DebugService: ServiceClient {
  /// Synchronous. Unary.
  func getVersion(_ request: Debug_GetVersionRequest) throws -> Debug_GetVersionReply
  /// Asynchronous. Unary.
  func getVersion(_ request: Debug_GetVersionRequest, completion: @escaping (Debug_GetVersionReply?, CallResult) -> Void) throws -> Debug_DebugGetVersionCall

  /// Synchronous. Unary.
  func ping(_ request: Debug_PingRequest) throws -> Debug_PingReply
  /// Asynchronous. Unary.
  func ping(_ request: Debug_PingRequest, completion: @escaping (Debug_PingReply?, CallResult) -> Void) throws -> Debug_DebugPingCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func getStream(_ request: Debug_GetStreamRequest, completion: ((CallResult) -> Void)?) throws -> Debug_DebugGetStreamCall

}

internal final class Debug_DebugServiceClient: ServiceClientBase, Debug_DebugService {
  /// Synchronous. Unary.
  internal func getVersion(_ request: Debug_GetVersionRequest) throws -> Debug_GetVersionReply {
    return try Debug_DebugGetVersionCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getVersion(_ request: Debug_GetVersionRequest, completion: @escaping (Debug_GetVersionReply?, CallResult) -> Void) throws -> Debug_DebugGetVersionCall {
    return try Debug_DebugGetVersionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func ping(_ request: Debug_PingRequest) throws -> Debug_PingReply {
    return try Debug_DebugPingCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func ping(_ request: Debug_PingRequest, completion: @escaping (Debug_PingReply?, CallResult) -> Void) throws -> Debug_DebugPingCall {
    return try Debug_DebugPingCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func getStream(_ request: Debug_GetStreamRequest, completion: ((CallResult) -> Void)?) throws -> Debug_DebugGetStreamCall {
    return try Debug_DebugGetStreamCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Debug_DebugProvider: ServiceProvider {
  func getVersion(request: Debug_GetVersionRequest, session: Debug_DebugGetVersionSession) throws -> Debug_GetVersionReply
  func ping(request: Debug_PingRequest, session: Debug_DebugPingSession) throws -> Debug_PingReply
  func getStream(request: Debug_GetStreamRequest, session: Debug_DebugGetStreamSession) throws -> ServerStatus?
}

extension Debug_DebugProvider {
  internal var serviceName: String { return "debug.Debug" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/debug.Debug/GetVersion":
      return try Debug_DebugGetVersionSessionBase(
        handler: handler,
        providerBlock: { try self.getVersion(request: $0, session: $1 as! Debug_DebugGetVersionSessionBase) })
          .run()
    case "/debug.Debug/Ping":
      return try Debug_DebugPingSessionBase(
        handler: handler,
        providerBlock: { try self.ping(request: $0, session: $1 as! Debug_DebugPingSessionBase) })
          .run()
    case "/debug.Debug/GetStream":
      return try Debug_DebugGetStreamSessionBase(
        handler: handler,
        providerBlock: { try self.getStream(request: $0, session: $1 as! Debug_DebugGetStreamSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Debug_DebugGetVersionSession: ServerSessionUnary {}

fileprivate final class Debug_DebugGetVersionSessionBase: ServerSessionUnaryBase<Debug_GetVersionRequest, Debug_GetVersionReply>, Debug_DebugGetVersionSession {}

internal protocol Debug_DebugPingSession: ServerSessionUnary {}

fileprivate final class Debug_DebugPingSessionBase: ServerSessionUnaryBase<Debug_PingRequest, Debug_PingReply>, Debug_DebugPingSession {}

internal protocol Debug_DebugGetStreamSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Debug_GetStreamReply, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Debug_GetStreamReply, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Debug_DebugGetStreamSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Debug_GetStreamReply, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Debug_DebugGetStreamSessionBase: ServerSessionServerStreamingBase<Debug_GetStreamRequest, Debug_GetStreamReply>, Debug_DebugGetStreamSession {}

