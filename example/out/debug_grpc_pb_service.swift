// Autogenerated. Do not modify!
// package: Debug
// file: debug.proto

import Foundation
import SwiftGRPC

@objc(DebugService)
class DebugService: GrpcService {


  @objc func getVersion(_ jsReq: [String: Any], resolve: RCTPromiseResolveBlock, reject: RCTPromiseRejectBlock) -> Void {
    let svc = DebugGrpcClient
    var req = Debug_GetVersionRequest()

    // request mapping

    // end request mapping

    do {
      let res = try svc.getVersion(req)
      var jsRes: [String: Any] = [:]

      // response mapping
      jsRes["version"] = res.version
      // end response mapping

      resolve(jsRes)
    } catch {
      reject("ERROR", error.localizedDescription, error)
    }
  }


  @objc func ping(_ jsReq: [String: Any], resolve: RCTPromiseResolveBlock, reject: RCTPromiseRejectBlock) -> Void {
    let svc = DebugGrpcClient
    var req = Debug_PingRequest()

    // request mapping
    req.message = jsReq["message"] as? String ?? ""
    // end request mapping

    do {
      let res = try svc.ping(req)
      var jsRes: [String: Any] = [:]

      // response mapping
      jsRes["message"] = res.message
      // end response mapping

      resolve(jsRes)
    } catch {
      reject("ERROR", error.localizedDescription, error)
    }
  }


  @objc func getStream(_ jsReq: [String: Any], resolve: RCTPromiseResolveBlock, reject: RCTPromiseRejectBlock) -> Void {
    let svc = DebugGrpcClient
    var req = Debug_GetStreamRequest()

    // request mapping

    // end request mapping

    do {
      let res = try svc.getStream(req)
      var jsRes: [String: Any] = [:]

      // response mapping
      jsRes["data"] = res.data
      // end response mapping

      resolve(jsRes)
    } catch {
      reject("ERROR", error.localizedDescription, error)
    }
  }

  
  @objc
  static func requiresMainQueueSetup() -> Bool {
    return false
  }
}
